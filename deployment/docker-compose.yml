version: '3.8'

services:
  # 后端API服务
  backend:
    image: ghcr.io/bluewatercg/projectcontractledger-backend:latest
    container_name: contract-ledger-backend
    restart: unless-stopped

    # 端口映射
    ports:
      - "${BACKEND_PORT:-8080}:8080"

    # 环境变量配置
    environment:
      # 基础配置
      - NODE_ENV=${NODE_ENV:-production}
      - BACKEND_PORT=8080
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}

      # 外部MySQL数据库配置
      - DB_HOST=${DB_HOST:-192.168.1.254}
      - DB_PORT=${DB_PORT:-3306}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE:-procontractledger}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-20}

      # 外部Redis配置
      - REDIS_HOST=${REDIS_HOST:-192.168.1.160}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-13}

      # JWT配置
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}

      # 上传配置
      - UPLOAD_DIR=/app/uploads

      # 时区配置
      - TZ=${TZ:-Asia/Shanghai}

    # 数据卷映射
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads

    # 健康检查
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

    # 网络模式配置
    network_mode: ${NETWORK_MODE:-bridge}

  # 前端Web服务
  frontend:
    image: ghcr.io/bluewatercg/projectcontractledger-frontend:latest
    container_name: contract-ledger-frontend
    restart: unless-stopped

    # 端口映射
    ports:
      - "${FRONTEND_PORT:-80}:80"

    # 环境变量配置
    environment:
      # 后端服务配置 - 支持IP地址通讯
      - BACKEND_HOST=${BACKEND_HOST:-192.168.1.115}
      - BACKEND_PORT=${BACKEND_PORT:-8080}

      # 时区配置
      - TZ=${TZ:-Asia/Shanghai}

    # 健康检查
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

    # 网络模式配置
    network_mode: ${NETWORK_MODE:-bridge}

    # 依赖后端服务
    depends_on:
      backend:
        condition: service_healthy

# 数据卷
volumes:
  backend_logs:
    driver: local
  backend_uploads:
    driver: local

# 使用说明：
# 1. 复制环境变量模板：cp .env.template .env
# 2. 编辑 .env 文件，填写数据库和Redis配置
# 3. 启动服务：docker-compose up -d
# 4. 查看日志：docker-compose logs -f
# 5. 停止服务：docker-compose down
# 
# 访问地址：
# - 前端：http://您的服务器IP:${FRONTEND_PORT:-80}
# - 后端API：http://您的服务器IP:${BACKEND_PORT:-8080}
# - 健康检查：http://您的服务器IP:${BACKEND_PORT:-8080}/health
