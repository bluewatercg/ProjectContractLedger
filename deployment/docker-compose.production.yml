version: '3.8'

services:
  # 应用服务 - 仅应用容器，使用外部MySQL、Redis和反向代理
  app:
    image: ghcr.milu.moe/bluewatercg/projectcontractledger:latest
    container_name: contract-ledger-app
    restart: unless-stopped

    # 端口映射（支持环境变量配置）
    ports:
      - "${APP_HTTP_PORT:-8000}:80"
      - "${APP_API_PORT:-8080}:8080"

    # 环境变量配置
    environment:
      # 基础配置
      - NODE_ENV=production

      # 外部MySQL数据库配置
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT:-3306}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-20}

      # 外部Redis配置
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB:-13}

      # JWT配置
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}

      # 应用配置
      - BACKEND_PORT=${APP_API_PORT:-8080}
      - FRONTEND_HTTP_PORT=${APP_HTTP_PORT:-8000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}

      # 时区配置
      - TZ=${TZ:-Asia/Shanghai}

    # 数据卷（匹配生产环境配置）
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads

    # 健康检查
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

    # 网络模式：使用主机网络或桥接网络
    network_mode: ${NETWORK_MODE:-bridge}

  # 注意：使用外部MySQL和Redis服务器，不需要容器化数据库服务

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: contract-ledger-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - contract-ledger-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: contract-ledger-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - contract-ledger-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: contract-ledger-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - contract-ledger-network

# 数据卷
volumes:
  app_logs:
    driver: local
  app_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 网络配置
networks:
  contract-ledger-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
