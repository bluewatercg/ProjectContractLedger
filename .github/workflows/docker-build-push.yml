name: Build and Push Docker Images (External Services)

on:
  push:
    branches: [ main, master, develop, midwayjs ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, midwayjs ]
  workflow_dispatch:  # 允许手动触发

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 构建验证作业
  build-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'yarn'
        cache-dependency-path: |
          apps/backend/yarn.lock
          apps/frontend/yarn.lock

    - name: Install backend dependencies
      run: |
        cd apps/backend
        yarn install --network-timeout 100000

    - name: Install frontend dependencies
      run: |
        cd apps/frontend
        yarn install --network-timeout 100000

    - name: Fix backend code formatting
      run: |
        cd apps/backend
        yarn lint:fix

    - name: Run backend linting
      run: |
        cd apps/backend
        yarn lint

    - name: Build backend
      run: |
        cd apps/backend
        yarn build

    - name: Build frontend
      run: |
        cd apps/frontend
        yarn build

  # 构建和推送镜像作业
  build-and-push:
    needs: build-check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Build and push application image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./tools/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        # 添加构建参数用于调试
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Image digest and deployment info
      run: |
        echo "Application image digest: ${{ steps.build.outputs.digest }}"
        echo "Image tags: ${{ steps.meta.outputs.tags }}"
        echo ""
        echo "=== 部署信息 ==="
        echo "镜像已推送到 GitHub Container Registry"
        echo "使用以下命令部署到生产环境："
        echo ""
        echo "1. 下载部署文件："
        echo "   wget https://raw.githubusercontent.com/${{ github.repository }}/main/tools/docker/docker-compose.external-simple.yml"
        echo "   wget https://raw.githubusercontent.com/${{ github.repository }}/main/.env.external-simple.template"
        echo ""
        echo "2. 配置环境变量："
        echo "   cp .env.external-simple.template .env.external-simple"
        echo "   # 编辑 .env.external-simple 文件，填写MySQL和Redis配置"
        echo ""
        echo "3. 启动服务："
        echo "   docker-compose -f tools/docker/docker-compose.external-simple.yml --env-file .env.external-simple up -d"
        echo ""
        echo "镜像标签: ${{ steps.meta.outputs.tags }}"
