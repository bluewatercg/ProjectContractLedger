# 简化版Dockerfile - 用于测试和快速构建

# 使用官方Node.js镜像
FROM node:18-alpine

# 安装必要的系统依赖
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    nginx \
    curl \
    wget

# 创建应用目录
WORKDIR /app

# 创建非root用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S appuser -u 1001 -G nodejs

# 复制package.json文件
COPY midway-backend/package.json ./backend/
COPY midway-frontend/package.json ./frontend/

# 复制yarn.lock文件（如果存在）
COPY midway-backend/yarn.lock ./backend/
COPY midway-frontend/yarn.lock ./frontend/

# 安装后端依赖
WORKDIR /app/backend
RUN echo "Installing backend dependencies..." && \
    yarn install --network-timeout 100000 --verbose || \
    (echo "Yarn failed, trying npm..." && npm install --verbose)

# 安装前端依赖
WORKDIR /app/frontend
RUN echo "Installing frontend dependencies..." && \
    yarn install --network-timeout 100000 --verbose || \
    (echo "Yarn failed, trying npm..." && npm install --verbose)

# 复制源代码
WORKDIR /app
COPY midway-backend/ ./backend/
COPY midway-frontend/ ./frontend/

# 构建后端
WORKDIR /app/backend
RUN yarn build || npm run build

# 构建前端
WORKDIR /app/frontend
RUN yarn build || npm run build

# 复制前端构建产物到nginx目录
RUN cp -r /app/frontend/dist/* /usr/share/nginx/html/

# 复制nginx配置
COPY nginx.conf /etc/nginx/nginx.conf

# 复制启动脚本
COPY start.sh /start.sh
RUN chmod +x /start.sh

# 更改文件所有权
RUN chown -R appuser:nodejs /app && \
    chown appuser:nodejs /start.sh

# 创建日志目录
RUN mkdir -p /var/log/app && \
    chown -R appuser:nodejs /var/log/app

# 暴露端口
EXPOSE 80 8080

# 设置工作目录
WORKDIR /app

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost/health || exit 1

# 启动应用
CMD ["/start.sh"]
