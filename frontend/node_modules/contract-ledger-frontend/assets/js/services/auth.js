/**
 * 认证服务
 * 处理用户登录、注销等认证相关功能
 */
import ApiService from './api.js';
import { API_ENDPOINTS } from '../config/api.js';

class AuthService extends ApiService {
  constructor() {
    super();
    this.isAuthenticated = !!localStorage.getItem('auth_token');
  }

  /**
   * 用户登录
   * @param {Object} credentials - 用户凭证
   * @param {string} credentials.username - 用户名
   * @param {string} credentials.password - 密码
   * @returns {Promise<Object>} - 登录结果
   */
  async login(credentials) {
    try {
      const response = await this.post(API_ENDPOINTS.AUTH.LOGIN, credentials);

      if (response && response.access_token) {
        // 存储令牌
        localStorage.setItem('auth_token', response.access_token);
        this.setAuthToken(response.access_token);
        this.isAuthenticated = true;

        // --- 添加日志：解析并打印令牌内容 ---
        try {
          const tokenParts = response.access_token.split('.');
          if (tokenParts.length === 3) {
            const payload = JSON.parse(atob(tokenParts[1]));
            console.log('解析的令牌Payload:', payload);
            console.log('令牌过期时间 (exp):', new Date(payload.exp * 1000));
          } else {
            console.warn('非JWT格式令牌或格式不正确');
          }
        } catch (e) {
          console.error('解析令牌失败:', e);
        }
        // ------------------------------------
      }

      return response;
    } catch (error) {
      console.error('登录失败:', error);
      throw error;
    }
  }

  /**
   * 用户注销
   */
  logout() {
    localStorage.removeItem('auth_token');
    this.setAuthToken(null);
    this.isAuthenticated = false;
    window.location.href = '/pages/login.html';
  }

  /**
   * 检查用户是否已认证
   * @returns {boolean} - 是否已认证
   */
  checkAuth() {
    const token = localStorage.getItem('auth_token');
    this.isAuthenticated = !!token;
    
    if (token) {
      this.setAuthToken(token);
    }
    
    return this.isAuthenticated;
  }

  /**
   * 刷新令牌
   * @returns {Promise<string>} - 新的访问令牌
   */
  async refreshToken() {
    try {
      const response = await this.post(API_ENDPOINTS.AUTH.REFRESH);

      if (response && response.access_token) {
        // 更新存储的令牌
        localStorage.setItem('auth_token', response.access_token);
        this.setAuthToken(response.access_token);
        this.isAuthenticated = true;
        return response.access_token;
      } else {
        throw new Error('刷新令牌失败');
      }
    } catch (error) {
      console.error('刷新令牌失败:', error);
      this.logout();
      throw error;
    }
  }

  /**
   * 验证当前令牌是否有效
   * @returns {Promise<boolean>} - 令牌是否有效
   */
  async validateToken() {
    if (!this.isAuthenticated) {
      return false;
    }

    try {
      const response = await this.get(API_ENDPOINTS.AUTH.VALIDATE);
      return !!response;
    } catch (error) {
      console.error('验证令牌失败:', error);
      return false;
    }
  }

  /**
   * 获取当前用户信息
   * @returns {Promise<Object>} - 用户信息
   */
  async getCurrentUser() {
    if (!this.isAuthenticated) {
      return null;
    }

    try {
      return await this.get('/users/me');
    } catch (error) {
      console.error('获取用户信息失败:', error);
      return null;
    }
  }

  /**
   * 检查令牌是否即将过期并自动刷新
   * @returns {Promise<boolean>} - 是否成功刷新或令牌仍然有效
   */
  async checkAndRefreshToken() {
    const token = localStorage.getItem('auth_token');
    if (!token) {
      return false;
    }

    try {
      // 尝试解析令牌以检查过期时间
      const payload = JSON.parse(atob(token.split('.')[1]));
      const currentTime = Math.floor(Date.now() / 1000);
      const timeUntilExpiry = payload.exp - currentTime;

      // 如果令牌在5分钟内过期，尝试刷新
      if (timeUntilExpiry < 300) {
        console.log('令牌即将过期，尝试刷新');
        await this.refreshToken();
        return true;
      }

      return true;
    } catch (error) {
      console.error('检查令牌过期时间失败:', error);
      // 如果无法解析令牌，尝试验证
      return await this.validateToken();
    }
  }
}

export default new AuthService();